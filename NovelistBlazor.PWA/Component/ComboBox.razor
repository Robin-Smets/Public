@using NovelistBlazor.Common.DTO
@using NovelistBlazor.Common.Service
@using NovelistBlazor.Common

@implements IDisposable

@inject Repository _repository
@inject EventMediator _eventMediator;

<select @onchange="OnSelectionChanged" class="rounded-lg text-black">
    @if (Type == DTOType.Novel)
    {
        if (_repository.AllNovels?.Count() > 0)
        {
            @foreach (var novel in _repository.AllNovels)
            {
                <option value="@novel.Id" selected="@(selectedId == novel.Id)">@novel.Id - @novel.Name</option>
            }             
        } 
    }
    else if (Type == DTOType.Character)
    {
        if (_repository.AllCurrentCharacters?.Count() > 0)
        {
            @foreach (var character in _repository.AllCurrentCharacters)
            {
                <option value="@character.Id">@character.Id - @character.Name</option>
            }
        }
    }
    else if (Type == DTOType.PlotUnit)
    {
        if (_repository.AllCurrentPlotUnits?.Count() > 0)
        {
            @foreach (var plotUnit in _repository.AllCurrentPlotUnits)
            {
                <option value="@plotUnit.Id">@plotUnit.Id - @plotUnit.Title</option>
            }            
        }
    }
</select>

@code
{
    [Parameter]
    public DTOType Type { get; set; }

    private int selectedId;

    private async Task OnSelectionChanged(ChangeEventArgs e)
    {
        var id = Convert.ToInt32(e.Value.ToString());

        if (Type == DTOType.Novel)
        {
            await _repository.SetCurrentNovelAsync(id);
        }
        else if (Type == DTOType.Character)
        {
            await _repository.SetCurrentCharacterAsync(id);
        }
        else if (Type == DTOType.PlotUnit)
        {
            await _repository.SetCurrentPlotUnitAsync(id);
        }
    }

    private void UpdateComponent(Repository repository)
    {
        selectedId = repository.CurrentNovel?.Id ?? 0;
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        _eventMediator.OnRepositoryDataChanged += UpdateComponent;
    }

    public void Dispose()
    {
        _eventMediator.OnRepositoryDataChanged -= UpdateComponent;
    }
}