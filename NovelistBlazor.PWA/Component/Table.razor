@using NovelistBlazor.Common.Interface;
@using NovelistBlazor.Common;
@using NovelistBlazor.Common.Service;

@implements IDisposable

@inject Repository _repository
@inject EventMediator _eventMediator;

<div>
    <div>
        <div>
            <div>
                <div>
                    <table>
                        <thead>
                            <tr>
                                @if (DTOType == DTOType.Novel)
                                {
                                    <th scope="col">Id</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Description</th>
                                }
                                else if (DTOType == DTOType.Character)
                                {
                                    <th scope="col">Id</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">RoleInStory</th>
                                }
                                else if (DTOType == DTOType.PlotUnit)
                                {
                                    <th scope="col">Id</th>
                                    <th scope="col">Title</th>
                                    <th scope="col">Description</th>
                                }
                            </tr>
                        </thead>
                        <tbody>

                            @if (DTOType == DTOType.Novel)
                            {
                                if (_repository.AllNovels != null)
                                {
                                    @foreach (var novel in _repository.AllNovels)
                                    {
                                        <tr>
                                            <td>@novel.Id</td>
                                            <td>@novel.Name</td>
                                            <td>@novel.Description</td>
                                        </tr>
                                    }                                    
                                }

                            }
                            else if (DTOType == DTOType.Character)
                            {
                                if (_repository.AllCurrentCharacters != null)
                                {
                                    @foreach (var novel in _repository.AllCurrentCharacters)
                                    {
                                        <tr>
                                            <td>@novel.Id</td>
                                            <td>@novel.Name</td>
                                            <td>@novel.RoleInStory</td>
                                        </tr>
                                    }                                    
                                }

                            }
                            else if (DTOType == DTOType.PlotUnit)
                            {
                                if (_repository.AllCurrentPlotUnits != null)
                                {
                                    @foreach (var novel in _repository.AllCurrentPlotUnits)
                                    {
                                        <tr>
                                            <td>@novel.Id</td>
                                            <td>@novel.Title</td>
                                            <td>@novel.Description</td>
                                        </tr>
                                    }                                   
                                }

                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public DTOType DTOType { get; set; }


    private void UpdateComponent(Repository repository)
    {
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        _eventMediator.OnRepositoryDataChanged += UpdateComponent;
    }

    public void Dispose()
    {
        _eventMediator.OnRepositoryDataChanged -= UpdateComponent;
    }
}
