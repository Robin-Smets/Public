@using NovelistBlazor.PWA.Component
@using NovelistBlazor.PWA.Component.Svg
@using NovelistBlazor.Common
@using NovelistBlazor.Common.DTO
@using NovelistBlazor.Common.Service

@inherits ComponentBase
@implements IDisposable

@inject Repository _repository
@inject EventMediator _eventMediator


<section class="flex flex-row bg-stone-950 text-white ps-2">
    <Logo Text="Novelist">
        <NIcon />
    </Logo>
    <div class="flex flex-grow flex-row justify-center">
        <MenuItem Text="New" OnClick="_repository.NewAsync">
            <PlusDocumentIcon />
        </MenuItem>
        <Seperator />
        <MenuItem Text="Save" OnClick="_repository.SaveAsync">
            <ArchiveBoxIcon />
        </MenuItem>
        <Seperator />
        <MenuItem Text="Delete" OnClick="_repository.DeleteAsync">
            <TrashCanIcon />
        </MenuItem>
        <!--
        <MenuItem Text="Export" OnClick="ViewModel.OnExport">
            <PrinterIcon />
        </MenuItem>
        <Seperator />
        -->
    </div>
    <div class="flex flex-row m-4 place-content-center space-x-1">
        <label pe-2>Novel: </label>
        <ComboBox Type="@DTOType.Novel"/>
    </div>
    <!--
    <div>
        <Seperator />
        <MenuItem OnClick="ViewModel.OnMinimize">
            <MinusIcon  />
        </MenuItem>
        <MenuItem OnClick="ViewModel.OnExpand">
            <ExpandIcon />
        </MenuItem>
        <MenuItem OnClick="ViewModel.OnExit">
            <XIcon />
        </MenuItem>
    </div>
    -->
</section>

@code {

    protected override async Task OnInitializedAsync()
    {
        _eventMediator.OnRepositoryDataChanged += UpdateComponent;
    }

    private void UpdateComponent(Repository repository)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        _eventMediator.OnRepositoryDataChanged -= UpdateComponent;
    }

}

